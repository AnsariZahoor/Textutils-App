{"version":3,"sources":["components/Navbar.js","components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","react_default","a","createElement","className","concat","mode","title","type","onClick","toggleMode","class","style","font-size","TextForm","_useState","useState","_useState2","Object","slicedToArray","text","setText","color","backgroundColor","split","length","id","rows","value","onChange","event","target","newText","toUpperCase","toLowerCase","words","CapitalizedWords","forEach","element","push","slice","join","document","getElementById","select","navigator","clipboard","writeText","App","setMode","body","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.f5bab693.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <div>\r\n      <nav className={`navbar navbar-${props.mode} bg-${props.mode}`}>\r\n        <div className=\"container-fluid\">\r\n          <span className=\"navbar-brand mb-0 h1\">{props.title}</span>\r\n          {props.mode === 'light'\r\n            ? \r\n            <button type=\"button\" className={`btn btn-${props.mode} float-end border-0`} onClick={props.toggleMode}>\r\n              <i class=\"bi bi-brightness-high-fill\" style={{ \"font-size\": \"18px\" }}></i>\r\n            </button>\r\n            :\r\n            <button type=\"button\" className={`btn btn-${props.mode} float-end border-0`} onClick={props.toggleMode}>\r\n              <i class=\"bi bi-moon-fill\" style={{ \"font-size\": \"18px\" }}></i>\r\n            </button>\r\n          }\r\n        </div>\r\n      </nav>\r\n    </div>\r\n  )\r\n}\r\n\r\nNavbar.propTypes = { title: PropTypes.string };\r\n","import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default function TextForm(props) {\r\n    const handleOnChange = (event) => {\r\n        setText(event.target.value);\r\n    }\r\n\r\n    const handleUpperCase = () => {\r\n        let newText = text.toUpperCase();\r\n        setText(newText)\r\n    }\r\n\r\n    const handleLowerCase = () => {\r\n        let newText = text.toLowerCase();\r\n        setText(newText)\r\n    }\r\n\r\n    const handleCapitalize = () => {\r\n        let words = text.split(' ');  \r\n        var CapitalizedWords = [];  \r\n        words.forEach(element => {  \r\n            CapitalizedWords.push(element[0].toUpperCase() + element.slice(1, element.length));  \r\n        });\r\n        setText(CapitalizedWords.join(' '));\r\n    }\r\n\r\n    const handleClearClick = () => {\r\n        let newText = '';\r\n        setText(newText)\r\n    }\r\n\r\n    const handleExtraSpaces = () => {\r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText.join(\" \"))\r\n    }\r\n\r\n    const handleCopy = () => {\r\n        var text = document.getElementById('myBox');\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value);\r\n    }\r\n\r\n\r\n    const [text, setText] = useState('');\r\n    // style={{'background':'#232329'}}\r\n    return (\r\n        <div className='container mt-5' style={{ color: props.mode === 'dark' ? 'white' : 'black' }}>\r\n            <div className=\"card p-3 shadow border-0\" style={{ backgroundColor: props.mode === 'dark' ? '#212529' : 'white' }}>\r\n                <div className=\"card-body\">\r\n                    <div className=\"mb-3\">\r\n                        <h3 className=\"mb-2 float-start\">Enter the Text You Want to Analyze</h3>\r\n                        <p className=\"float-end\">{0.008 * text.split(\" \").length} Minutes to read</p>\r\n                        <textarea className=\"form-control\" id=\"myBox\" rows=\"8\" value={text} onChange={handleOnChange} style={{ backgroundColor: props.mode === 'dark' ? '#14141A' : 'white', color: props.mode === 'dark' ? 'white' : 'black' }}></textarea>\r\n                    </div>\r\n                    <p className=\"float-end\">{text.split(\" \").length} words and {text.length} characters</p>\r\n                    <button className={`btn btn-sm btn-${props.mode === 'light' ? 'dark' : 'light'} me-2`} onClick={handleUpperCase}>UPPERCASE</button>\r\n                    <button className={`btn btn-sm btn-${props.mode === 'light' ? 'dark' : 'light'} me-2`} onClick={handleLowerCase}>lowercase</button>\r\n                    <button className={`btn btn-sm btn-${props.mode === 'light' ? 'dark' : 'light'} me-2`} onClick={handleCapitalize}>Capitalize</button>\r\n                    <button className={`btn btn-sm btn-${props.mode === 'light' ? 'dark' : 'light'} me-2`} onClick={handleExtraSpaces}>Remove ExtraSpaces</button>\r\n                    <button className=\"btn btn-sm btn-outline-danger me-2\" onClick={handleClearClick}>\r\n                        <i class=\"bi bi-x-lg\"></i>\r\n                        &nbsp;Clear Text</button>\r\n                    <button className={`btn btn-sm btn-outline-${props.mode === 'light' ? 'dark' : 'light'} me-2`} onClick={handleCopy}>\r\n                        <i class=\"bi bi-clipboard-check\"></i>\r\n                        &nbsp;Copy Text</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState } from 'react';\nimport './App.css';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\n\n\nfunction App() {\n  const [mode, setMode] = useState('light');\n\n  const toggleMode = () => {\n    if (mode === 'light') {\n      setMode('dark');\n      document.body.style.backgroundColor = '#14141A';\n    }\n    else {\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n    }\n  }\n\n  return (\n    <div>\n      <Navbar title=\"Textutils\" mode={mode} toggleMode={toggleMode} />\n      <TextForm mode={mode} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}